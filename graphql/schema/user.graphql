
extend type Mutation {
#    create_user(input: CreateUserInput! @spread): User @guard @field(resolver: "App\\GraphQL\\Mutations\\UserMutations@createUser")
    edit_user(input: EditUserInput! @spread): Boolean @guard @field(resolver: "App\\GraphQL\\Mutations\\UserMutations@editUser")
    reset_user_password(input: resetUserPasswordInput @spread): ForgotPasswordResponse! @field(resolver: "App\\GraphQL\\Mutations\\UserMutations@resetUserPassword")
    #    delete_user(input: DeleteUserInput! @spread): Boolean! @guard @field(resolver: "App\\GraphQL\\Mutations\\UserMutations@deleteUser")
#    duplicate_user(input: DuplicateUserInput! @spread): Boolean! @guard @field(resolver: "App\\GraphQL\\Mutations\\UserMutations@duplicateUser")
}

extend type Query {
    me: User @guard @field(resolver: "App\\GraphQL\\Queries\\UserQueries@getMe")
#    users(name: String @where(operator: "like") orderBy: [OrderByClause!] @orderBy): [User!]! @paginate(type: "paginator" model: "App\\Models\\User")
#    users(name: String @eq orderBy: [OrderByClause!] @orderBy): [User!]! @paginate(type: "paginator" model: "App\\Models\\User")
    users(name: String, dataset_id: ID): [User] @field(resolver: "App\\GraphQL\\Queries\\UserQueries@getUsers")
    share_search_users(shareable_type: String!, shareable_id: ID!, name: String): [User] @guard @field(resolver: "App\\GraphQL\\Queries\\UserQueries@shareSearchUsers")
    user(id: ID @eq): User @find
#    my_user_list(name: String): [User!]! @guard @field(resolver: "App\\GraphQL\\Queries\\UserQueries@my_user_list")
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
#    total: JSON
    datasets: [DataSet]
    media: [Medium]
    medium: Medium
    apis_count: Int
    resources_count: Int
    datasets_count: Int
}

#input CreateUserInput{
#    name: String! @rules(apply:["required"])
#}


input resetUserPasswordInput {
    email: String! @rules(apply: ["required", "email"])
    token: String
    code: String
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

input EditUserInput{
    name: String!
    email: String! @rules(apply: ["email", "App\\Rules\\UniqueCheckUser"])
    media_ids: [ID]
    password: String @rules(apply: ["nullable", "confirmed", "min:8"])
    password_confirmation: String
}

#input DeleteUserInput{
#    id: ID! @rules(apply: ["App\\Rules\\OwnerCheckUser", "App\\Rules\\DeleteCheckUser"])
#    ids: [ID] @rules(apply: ["App\\Rules\\OwnerCheckUser", "App\\Rules\\DeleteCheckUser"])
#}
#
#input DuplicateUserInput{
#    id: ID! @rules(apply: ["required", "App\\Rules\\OwnerCheckUser"])
#}
